- Creata l'applicazione

----------------------------------- SETUP INIZIALE DEL PROGETTO -----------------------------------

- Eject per abilitare i CSS MODULES
  - in webpack.config.dev e webpack.config.prod aggiungo alle options del css-loader
      modules: true,
      localIdentName: '[name]__[local]__[hash:base64:5]',

- Pulizia progetto: rimuovo App.css, logo.svg, className in App.js e contenuto del componente App.js

- Aggiunto Google Font Open SANS direttamente con CDN in ./public/index.html

- Creo la mia alberatura per i componenti:                  // da aggiornare ad ogni nuovo componente
    ./components                                    -> per i stateless components
        ./Layout                                        -> sarà il mio componente di layout del progetto. Gestisto lo state!
            Layout.js
            Layout.css
        ./Navigation
            ./Toolbar                                       -> Componente per la toolbar
                Toolbar.js
                Toolbar.css
            ./NavigationItems                               -> Componente per i link della navbar
                NavigationItems.js
                NavigationItems.css
                ./NavigationItem                                -> Componente per il link singolo della navbar
                    NavigationItem.js
                    NavigationItem.css
            ./SideDrawer                                    -> Componente per il menù laterale
                SideDrawer.js
                SideDrawer.css
                ./DrawerToggle                                  -> Componente pulsante hamburger
                    DrawerToggle.js
                    DrawerToggle.css
        ./UI
            ./Backdrop                                      -> componente backdrop per la modale d'acquisto
                Backdrop.js
                Backdrop.css
            ./Modal                                         -> componente per la modale d'acquisto
                Modal.js
                Modal.css
            ./Button                                        -> Componente custo per un button dinamico
                Button.js
                Button.css
        ./Burger                                        -> sarà il componente dell'hamburger che verrà composto
            Burger.js
            ./BurgerIngredient                              -> componente di ingrediente dell'hamburger
                BurgerIngredient.js
                BurgerIngredient.css
            ./BuildControls                                 -> componente per la scelta degli ingredienti
                BuildControls.js
                BuildControls.css
                ./BuildControl                                  -> componente per il controllo singolo di ogni ingrediente
                    BuildControls.js
                    BuildControls.css
            ./OrderSummary                                  -> componente che mostra la lista degli ingredienti selezionati
                OrderSummary.js
                OrderSummary.css
        ./Logo                                          -> componente per il mio logo
            Logo.js
            Logo.css
    ./containers                                    -> per i stateful components
        ./BurgerBuilder                                 -> componente generale del mio progetto, gestisco qui dentro lo state !
            BurgerBuilde.js

    ./hoc                                           -> folder per gli higher order components
        ./Aux.js                                        -> wrapper per il layout


- Creo il componente di layout che implementerà poi la toolbar e il burger builder
    Utilizzo un HOC per fare il wrapping delle due sezioni che mi servono
    Nel main ci sarà props.children, che di base ritornerà solo il contenuto del compoenente <Layout> da App.js


----------------------------------- BURGER BUILDER COMPONENT ( STATEFUL ) -----------------------------------

Questo sarà un container (stateful component) in quanto gestiremo lo state qui dentro!
Conterrà due componenti, wrappati nel nostro <Aux>
Il primo sarà Burger, componente che conterrà l'hamburger in costruzione
Il secondo sarà un Burger Controller, dove decideremo gli ingredienti

Aggiungo lo state, che conterrà per il momento gli ingredienti (ingredients). Questi ingredients verranno popolati dall'utente dal controller

Aggiungo le funzioni per aggiungere e rimuovere ingredienti. Passo queste funzioni al componente BuildControls.
Il componente BuildControls passerà queste funzioni ai componenti BuildControl utilizzando il type con cui questi componenti vengono creati
In queste funzioni gestisco l'aggiornamento del prezzo totale servendomi di un oggetto costante di prezzi per singolo ingrediente.

Aggiungo funzione per gestire lo state.purchasable (utilizzato nel BuildControls) per attivare il bottone ORDER NOW
Aggiungo funzione per gestire lo state.purchasing per mostrare/nascondere il componente Modal


----------------------------------- BURGER COMPONENT -----------------------------------

Questo componente conterrà a sua volta il componente BurgerIngredient.
In Burger.css ci sono gli stili per renderizzare gli strati dell'hamburger.
avrò un wrapper in cui andrò a renderizzare n componenti BurgerIngredient in base a quelli selezionati dall'utente

Trasformo l'oggetto ingredients in un array di BurgerIngredient (la procedura è nei commenti del componente)
In questo modo posso rendere dinamico l'output del componente in base agli ingredients che arrivano

Anche se avrò 0 ingredienti, il mio array sarà composto da n array (vuoti). Per fare un check sulla lunghezza, faccio un "flat" dell'array con il metodo reduce.
In questo moddo, per 0 ingredienti, avrò un array di 0 elementi! Al suo posto, dopo un if, metterò un paragrafo.


----------------------------------- BURGERINGREDIENT COMPONENT -----------------------------------

Ritornerà un JSX con una classe css che determinerà l'aspetto del componente (carne, insalata, ecc...).
Questa classe verrà impostata dinamicamente con uno switch sulla proprietà this.props.type che mi aspetto verrà passata al componente.

Aggiungo il PropTypes per la validazione dell'ingrediente, facendo il chain di .string e .isRequired


----------------------------------- BUILDCONTROLS COMPONENT -----------------------------------

Questo componente contrrà più componenti singoli (BuildControl) che permetteranno l'aggiunta o la rimozione degli ingredienti.
Creerò un array di oggetti con label e type, e loopandoci sopra creo un array di componenti BuildControl per gli ingredienti.

Aggiungo bottone ORDER NOW che si attiva solo se il prezzo degli ingredienti è maggiore di zero (gestito con lo state di BurgerBuilder)


----------------------------------- BUILDCONTROL COMPONENT -----------------------------------

Componente riutilizzabile per aggiungere o rimuovere un ingrediente. Avrà una label (dinamica in base al nome dell'ingrediente) e due bottoni.
Un bottone per aggiungere (more) ed uno per rimuovere (less) ingredienti.

Aggiungo ai button le funzioni per aggiungere/rimuovere ingredienti


----------------------------------- MODAL -----------------------------------

Questo è un componente wrapper che ritornerà qualsiasi cosa verrà messa al suo interno con props.children
Si aprirà cliccando sul bottone ORDER NOW e verrà mostrata condizionalmente tramite props.purchasing
Mostrare/nascondere la modale viene gestito tramite style dinamico inline nel componente


----------------------------------- BACKDROP -----------------------------------

Questo è un componente che, condizionalmente ad una props.show, renderizzerà un backdrop oppure null.
Di base viene mostrato con la modale, e scompare con essa
Avrà associato all'evento click una funzione che chiuderà sia la modale che il backdrop (entrambi pilotati dalla proprietà show)


----------------------------------- BUTTON -----------------------------------

Aggiunto un componente Button custom che prende stile dinamico dipendente dalla proprietà props.btnStyle
Ha un evento clicked a cui passare una funzione
Mostra come testo props.children


----------------------------------- TOOLBAR -----------------------------------

Componente toolbar, sarà un header con all'interno un logo, un pulsante menu, ed una lista di link navigabili
Sarà presente in ogni pagina, quindi la inserirò come componente all'interno del mio Layout


----------------------------------- LOGO -----------------------------------

Componente per il logo dell'applicazione. Sarà un div contenente un img.
L'applicazione in produzione non sarà nella stessa directory che utilizzo in sviluppo!!
Quindi per utilizzare un asset, lo importo in js, e sarà una stringa al path che cambierà in produzione (ci pensa webpack).


----------------------------------- NAVIGATIONITEMS -----------------------------------

Componente che conterrà i vari link della barra di navigazione


----------------------------------- NAVIGATIONITEM -----------------------------------

Componente di un singolo link di navigazione.
Accetterà una props.link per generare dinamicamente un link per href.
Accetterà la props.active per settare dinamicamente una classe .active di stile (tipo pulsante appena premuto)


----------------------------------- SIDEDRAWER -----------------------------------

Componente per il menù a tendina.
Comparirà cliccando sul pulsante MENU. Appare e scompare con classi css dinamiche.
L'altezza del logo viene gestita dalla classe .Logo su un div wrapper per il logo. (La stessa cosa ho fatto per la toolbar)


----------------------------------- DRAWERTOGGLE -----------------------------------

Questo componente è un hamburger menu toggler.
Al click viene cambiato lo state del componente Layout, e farà apparire il menù laterale